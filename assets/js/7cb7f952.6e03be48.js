"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7448],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,g=m["".concat(o,".").concat(d)]||m[d]||u[d]||l;return a?n.createElement(g,c(c({ref:t},p),{},{components:a})):n.createElement(g,c({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,c=new Array(l);c[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<l;s++)c[s]=a[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3548:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),c=["components"],i={title:"Using scala-cli to run Scala Scripts",sidebar_position:3},o=void 0,s={unversionedId:"cookbooks/scala-scripts",id:"cookbooks/scala-scripts",isDocsHomePage:!1,title:"Using scala-cli to run Scala Scripts",description:"Scala Scripts",source:"@site/docs/cookbooks/scala-scripts.md",sourceDirName:"cookbooks",slug:"/cookbooks/scala-scripts",permalink:"/docs/cookbooks/scala-scripts",editUrl:"https://github.com/Virtuslab/scala-cli/edit/master/website/docs/cookbooks/scala-scripts.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Using scala-cli to run Scala Scripts",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Picking the Scala version with scala-cli",permalink:"/docs/cookbooks/scala-versions"},next:{title:"Testing your code with different Java versions",permalink:"/docs/cookbooks/scala-jvm"}},p=[{value:"Scala Scripts",id:"scala-scripts",children:[{value:"Run",id:"run",children:[],level:3}],level:2},{value:"Features",id:"features",children:[{value:"Package",id:"package",children:[],level:3},{value:"Watch mode",id:"watch-mode",children:[],level:3}],level:2}],u={toc:p};function m(e){var t=e.components,a=(0,r.Z)(e,c);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"scala-scripts"},"Scala Scripts"),(0,l.kt)("p",null,"Scala scripts are files that contain Scala code without a main method.\nThese source code files don't require build-tool configurations.\nTo run Scala scripts very quickly without waiting the need for build tools, use ",(0,l.kt)("inlineCode",{parentName:"p"},"scala-cli"),"."),(0,l.kt)("h3",{id:"run"},"Run"),(0,l.kt)("p",null,"For example, given this simple script:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=HelloScript.sc",title:"HelloScript.sc"},'val sv = scala.util.Properties.versionNumberString\n\nval message = s"Hello from Scala ${sv}, Java ${System.getProperty("java.version")}"\nprintln(message)\n')),(0,l.kt)("p",null,"You can run it directly with ",(0,l.kt)("inlineCode",{parentName:"p"},"scala-cli")," \u2014 there's no need for a build tool or additional configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli run HelloScript.sc\n")),(0,l.kt)("p",null,'Alternatively, you can add a "shebang" header to your script, make it executable, and execute it directly with ',(0,l.kt)("inlineCode",{parentName:"p"},"scala-cli"),". For example, given this script with a header that invokes ",(0,l.kt)("inlineCode",{parentName:"p"},"scala-cli"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=HelloScriptSheBang.sc",title:"HelloScriptSheBang.sc"},'#!/usr/bin/env -S scala-cli shebang\n\nval sv = scala.util.Properties.versionNumberString\n\ndef printMessage(): Unit =\n  val message = s"Hello from Scala ${sv}, Java ${System.getProperty("java.version")}"\n  println(message)\n\nprintMessage()\n')),(0,l.kt)("p",null,"You can make it executable and then run it like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x HelloScriptSheBang.sc\n./HelloScriptSheBang.sc\n# Hello from Scala 2.13.6, Java 16.0.1\n")),(0,l.kt)("p",null,"You can also pass command line arguments to Scala scripts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=ScriptArguments.sc",title:"ScriptArguments.sc"},"#!/usr/bin/env -S scala-cli shebang\nprintln(args(1))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x ScriptArguments.sc\n./ScriptArguments.sc foo bar\n# bar\n")),(0,l.kt)("p",null,"As shown, command line arguments are accessed through the special ",(0,l.kt)("inlineCode",{parentName:"p"},"args")," variable."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("p",null,"All of the features shown for non-scripts work for Scala scripts as well, such as waiting for changes (watch mode), dependency menagement, packaging, compiling, etc."),(0,l.kt)("h3",{id:"package"},"Package"),(0,l.kt)("p",null,"For example, run the ",(0,l.kt)("inlineCode",{parentName:"p"},"package")," sub-command to package your script as a lightweight executable JAR file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli package HelloScript.sc\n./HelloScript\n")),(0,l.kt)("h3",{id:"watch-mode"},"Watch mode"),(0,l.kt)("p",null,"As another example, pass ",(0,l.kt)("inlineCode",{parentName:"p"},"--watch")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"scala-cli")," to watch all source files for changes, and then re-run them when there is a change:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:"ignore",ignore:!0},"scala-cli --watch HelloScript.sc\n")))}m.isMDXComponent=!0}}]);